values_to = "Frequency")
# Plot code frequencies
ggplot(code_summary_long, aes(x = Code, y = Frequency, fill = Region)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~stage) +
labs(title = "Code Frequencies by Region and Stage",
y = "Frequency (proportion)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot
ggsave("code_frequencies.png", width = 10, height = 6)
# MAIN ENA ANALYSIS
# 1. Create ENA model with Region and Stage as units
# Set up the ENA accumulation
accum <- ena.accumulate.data(
units = ena_data[, c("Region", "stage")],  # Units (Region and stage)
conversation = ena_data[, "stanzaid"],     # Conversation (stanzas)
codes = ena_data[, codes],                 # Codes (what to connect)
window.size.back = 1                       # Use a moving window of 1 line
)
# Fix for ENA Analysis Error
# This script addresses the error in ena.accumulate.data
# Install and load required packages
if (!require("rENA")) {
install.packages("rENA")
}
if (!require("tidyverse")) {
install.packages("tidyverse")
}
library(rENA)
library(tidyverse)
# Load the data
ena_data <- read.csv("ena_dataset.csv", stringsAsFactors = FALSE)
# Define codes (binary variables representing the presence/absence of codes)
codes <- c("ZA", "HJ", "ZC", "GM", "HX", "LX", "JN", "XS", "ZZ")
# Check for missing values in key columns
cat("Missing values in Region:", sum(is.na(ena_data$Region)), "\n")
cat("Missing values in documentid:", sum(is.na(ena_data$documentid)), "\n")
cat("Missing values in stanzaid:", sum(is.na(ena_data$stanzaid)), "\n")
cat("Missing values in stage:", sum(is.na(ena_data$stage)), "\n")
# Check for missing values in code columns
code_na_counts <- sapply(ena_data[, codes], function(x) sum(is.na(x)))
cat("Missing values in code columns:\n")
print(code_na_counts)
# Remove rows with missing values in key columns
ena_data_clean <- ena_data %>%
filter(!is.na(Region) & !is.na(documentid) & !is.na(stanzaid) & !is.na(stage))
# Check if any code columns have missing values and replace with 0
for (code in codes) {
if (sum(is.na(ena_data_clean[[code]])) > 0) {
cat("Replacing", sum(is.na(ena_data_clean[[code]])), "NA values in", code, "with 0\n")
ena_data_clean[[code]][is.na(ena_data_clean[[code]])] <- 0
}
}
# Make sure all code columns are numeric
ena_data_clean[, codes] <- lapply(ena_data_clean[, codes], as.numeric)
# Check if all values in code columns are 0 or 1
for (code in codes) {
unique_vals <- unique(ena_data_clean[[code]])
if (!all(unique_vals %in% c(0, 1))) {
cat("Warning: Column", code, "contains values other than 0 and 1:",
paste(setdiff(unique_vals, c(0, 1)), collapse=", "), "\n")
# Convert any non-0/1 values to binary (0 if <= 0, 1 if > 0)
ena_data_clean[[code]] <- ifelse(ena_data_clean[[code]] > 0, 1, 0)
}
}
# Convert stanzaid to character if it's not already
ena_data_clean$stanzaid <- as.character(ena_data_clean$stanzaid)
# Ensure Region and stage have no empty strings
ena_data_clean <- ena_data_clean %>%
filter(Region != "" & stage != "")
# Check dimensions after cleaning
cat("Original data dimensions:", dim(ena_data), "\n")
cat("Cleaned data dimensions:", dim(ena_data_clean), "\n")
# Now try the ENA analysis with the cleaned data
# Create the accumulation
tryCatch({
accum <- ena.accumulate.data(
units = ena_data_clean[, c("Region", "stage")],  # Units
conversation = ena_data_clean[, "stanzaid", drop=FALSE],  # Conversation
codes = ena_data_clean[, codes],  # Codes
window.size.back = 1  # Window size
)
cat("Successfully created ENA accumulation!\n")
# Create the model
ena_model <- ena.make.set(
accum,
rotation.by = "mean",
norm.by = "unit",
node.position = "MDS",
node.position.random.seed = 42
)
cat("Successfully created ENA model!\n")
# Save the cleaned data for future use
write.csv(ena_data_clean, "ena_dataset_clean.csv", row.names = FALSE)
# Plot the model to confirm it works
plot(ena_model,
title = "ENA Network by Region and Stage (Fixed)",
font.size = 14,
label.size = 4,
label.font = "bold")
# Save the plot
ggsave("ena_network_fixed.png", width = 10, height = 8)
# Save the model
saveRDS(ena_model, "ena_model_fixed.rds")
cat("All steps completed successfully. The fixed ENA model and data have been saved.\n")
}, error = function(e) {
cat("Error occurred:", conditionMessage(e), "\n")
# If error still occurs, try with more detailed debugging
cat("\nPerforming more detailed checks...\n")
# Check if any stanzaids appear in multiple regions or stages
stanza_checks <- ena_data_clean %>%
group_by(stanzaid) %>%
summarize(
num_regions = n_distinct(Region),
num_stages = n_distinct(stage),
count = n()
) %>%
filter(num_regions > 1 | num_stages > 1)
if (nrow(stanza_checks) > 0) {
cat("Found stanzaids that appear in multiple regions or stages:\n")
print(stanza_checks)
# Make stanzaids unique by combining with region and stage
cat("Creating unique stanzaids by combining with region and stage...\n")
ena_data_clean$stanzaid <- paste(ena_data_clean$Region,
ena_data_clean$stage,
ena_data_clean$stanzaid,
sep="_")
# Try one more time with the modified stanzaids
accum <- ena.accumulate.data(
units = ena_data_clean[, c("Region", "stage")],
conversation = ena_data_clean[, "stanzaid", drop=FALSE],
codes = ena_data_clean[, codes],
window.size.back = 1
)
cat("Second attempt with modified stanzaids succeeded!\n")
# Create the model
ena_model <- ena.make.set(
accum,
rotation.by = "mean",
norm.by = "unit",
node.position = "MDS",
node.position.random.seed = 42
)
# Save the fixed data and model
write.csv(ena_data_clean, "ena_dataset_fixed.csv", row.names = FALSE)
saveRDS(ena_model, "ena_model_fixed.rds")
cat("All steps completed successfully after fixing stanzaid issues.\n")
} else {
cat("No duplicate stanzaid issues found. The error may be related to something else.\n")
}
})
# Advanced Epistemic Network Analysis using rENA package
# This script provides comprehensive ENA analysis with detailed visualizations and statistical tests
# Install and load required packages
if (!require("rENA")) {
install.packages("rENA")
}
if (!require("tidyverse")) {
install.packages("tidyverse")
}
if (!require("ggplot2")) {
install.packages("ggplot2")
}
if (!require("gridExtra")) {
install.packages("gridExtra")
}
library(rENA)
library(tidyverse)
library(ggplot2)
library(gridExtra)
# Set seed for reproducibility
set.seed(42)
# Load the data
ena_data <- read.csv("ena_dataset.csv", stringsAsFactors = FALSE)
# Define codes (binary variables representing the presence/absence of codes)
codes <- c("ZA", "HJ", "ZC", "GM", "HX", "LX", "JN", "XS", "ZZ")
# Print basic information about the dataset
cat("Dataset dimensions:", dim(ena_data), "\n")
cat("Number of unique regions:", length(unique(ena_data$Region)), "\n")
cat("Number of unique documents:", length(unique(ena_data$documentid)), "\n")
cat("Number of unique stages:", length(unique(ena_data$stage)), "\n")
cat("Number of stanzas:", length(unique(ena_data$stanzaid)), "\n")
# Explore code frequencies
code_frequencies <- colMeans(ena_data[, codes])
cat("\nCode frequencies:\n")
print(round(code_frequencies * 100, 2))
# Visualize code frequencies by region and stage
code_summary <- ena_data %>%
group_by(Region, stage) %>%
summarize(across(all_of(codes), mean)) %>%
ungroup()
# Reshape for plotting
code_summary_long <- code_summary %>%
pivot_longer(cols = all_of(codes),
names_to = "Code",
values_to = "Frequency")
# Plot code frequencies
ggplot(code_summary_long, aes(x = Code, y = Frequency, fill = Region)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~stage) +
labs(title = "Code Frequencies by Region and Stage",
y = "Frequency (proportion)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot
ggsave("code_frequencies.png", width = 10, height = 6)
# MAIN ENA ANALYSIS
# 1. Create ENA model with Region and Stage as units
# Set up the ENA accumulation
accum <- ena.accumulate.data(
units = ena_data[, c("Region", "stage")],  # Units (Region and stage)
conversation = ena_data[, "stanzaid"],     # Conversation (stanzas)
codes = ena_data[, codes],                 # Codes (what to connect)
window.size.back = 1                       # Use a moving window of 1 line
)
ena.accumulate.data
# Advanced Epistemic Network Analysis using rENA package
# This script provides comprehensive ENA analysis with detailed visualizations and statistical tests
# Install and load required packages
if (!require("rENA")) {
install.packages("rENA")
}
if (!require("tidyverse")) {
install.packages("tidyverse")
}
if (!require("ggplot2")) {
install.packages("ggplot2")
}
if (!require("gridExtra")) {
install.packages("gridExtra")
}
library(rENA)
library(tidyverse)
library(ggplot2)
library(gridExtra)
# Set seed for reproducibility
set.seed(42)
# Load the data
ena_data <- read.csv("ena_dataset.csv", stringsAsFactors = FALSE)
# Define codes (binary variables representing the presence/absence of codes)
codes <- c("ZA", "HJ", "ZC", "GM", "HX", "LX", "JN", "XS", "ZZ")
# Print basic information about the dataset
cat("Dataset dimensions:", dim(ena_data), "\n")
cat("Number of unique regions:", length(unique(ena_data$Region)), "\n")
cat("Number of unique documents:", length(unique(ena_data$documentid)), "\n")
cat("Number of unique stages:", length(unique(ena_data$stage)), "\n")
cat("Number of stanzas:", length(unique(ena_data$stanzaid)), "\n")
# Explore code frequencies
code_frequencies <- colMeans(ena_data[, codes])
cat("\nCode frequencies:\n")
print(round(code_frequencies * 100, 2))
# Visualize code frequencies by region and stage
code_summary <- ena_data %>%
group_by(Region, stage) %>%
summarize(across(all_of(codes), mean)) %>%
ungroup()
# Reshape for plotting
code_summary_long <- code_summary %>%
pivot_longer(cols = all_of(codes),
names_to = "Code",
values_to = "Frequency")
# Plot code frequencies
ggplot(code_summary_long, aes(x = Code, y = Frequency, fill = Region)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~stage) +
labs(title = "Code Frequencies by Region and Stage",
y = "Frequency (proportion)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot
ggsave("code_frequencies.png", width = 10, height = 6)
ena.accumulate.data = function (units = NULL, conversation = NULL, codes = NULL, metadata = NULL,
model = c("EndPoint", "AccumulatedTrajectory", "SeparateTrajectory"),
weight.by = "binary", window = c("MovingStanzaWindow", "Conversation"),
window.size.back = 1, window.size.forward = 0, mask = NULL,
include.meta = T, as.list = T, ...)
{
if (is.null(units) || is.null(conversation) || is.null(codes)) {
stop("Accumulation requires: units, conversation, and codes")
}
if (nrow(units) != nrow(conversation) || nrow(conversation) != nrow(codes)) {
stop("Data Frames do not have the same number of rows")
}
df <- cbind(units, conversation)
df <- cbind(df, codes)
metadata <- data.table::as.data.table(metadata)
if (!is.null(metadata) && nrow(metadata) == nrow(df)) {
df <- cbind(df, metadata)
}
model <- match.arg(model)
window <- match.arg(window)
units.by <- colnames(units)
conversations.by <- colnames(conversation)
if (identical(window, "Conversation")) {
conversations.by <- c(conversations.by, units.by)
window.size.back <- window
}
else if (identical(window, "MovingStanzaWindow")) {
if (grepl(pattern = "inf", x = window.size.back, ignore.case = T)) {
window.size.back <- Inf
}
if (grepl(pattern = "inf", x = window.size.forward, ignore.case = T)) {
window.size.forward <- Inf
}
}
data <- ENAdata$new(file = df, units = units, units.by = units.by,
conversations.by = conversations.by, codes = codes, window.size.back = window.size.back,
window.size.forward = window.size.forward, weight.by = weight.by,
model = model, mask = mask, include.meta = include.meta,
...)
data$process()
data$function.call <- sys.call()
if (as.list) {
data <- ena.set(data)
}
else {
warning(paste0("Usage of R6 data objects is deprecated and may be removed ",
"entirely in a future version. Consider upgrading to the new data ",
"object."))
}
data
}
# MAIN ENA ANALYSIS
# 1. Create ENA model with Region and Stage as units
# Set up the ENA accumulation
accum <- ena.accumulate.data(
units = ena_data[, c("Region", "stage")],  # Units (Region and stage)
conversation = ena_data[, "stanzaid"],     # Conversation (stanzas)
codes = ena_data[, codes],                 # Codes (what to connect)
window.size.back = 1                       # Use a moving window of 1 line
)
# Advanced Epistemic Network Analysis using rENA package
# This script provides comprehensive ENA analysis with detailed visualizations and statistical tests
# Install and load required packages
if (!require("rENA")) {
install.packages("rENA")
}
if (!require("tidyverse")) {
install.packages("tidyverse")
}
if (!require("ggplot2")) {
install.packages("ggplot2")
}
if (!require("gridExtra")) {
install.packages("gridExtra")
}
library(rENA)
library(tidyverse)
library(ggplot2)
library(gridExtra)
# Set seed for reproducibility
set.seed(42)
# Load the data
ena_data <- read.csv("ena_dataset.csv", stringsAsFactors = FALSE)
# Define codes (binary variables representing the presence/absence of codes)
codes <- c("ZA", "HJ", "ZC", "GM", "HX", "LX", "JN", "XS", "ZZ")
# Print basic information about the dataset
cat("Dataset dimensions:", dim(ena_data), "\n")
cat("Number of unique regions:", length(unique(ena_data$Region)), "\n")
cat("Number of unique documents:", length(unique(ena_data$documentid)), "\n")
cat("Number of unique stages:", length(unique(ena_data$stage)), "\n")
cat("Number of stanzas:", length(unique(ena_data$stanzaid)), "\n")
# Explore code frequencies
code_frequencies <- colMeans(ena_data[, codes])
cat("\nCode frequencies:\n")
print(round(code_frequencies * 100, 2))
# Visualize code frequencies by region and stage
code_summary <- ena_data %>%
group_by(Region, stage) %>%
summarize(across(all_of(codes), mean)) %>%
ungroup()
# Reshape for plotting
code_summary_long <- code_summary %>%
pivot_longer(cols = all_of(codes),
names_to = "Code",
values_to = "Frequency")
# Plot code frequencies
ggplot(code_summary_long, aes(x = Code, y = Frequency, fill = Region)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~stage) +
labs(title = "Code Frequencies by Region and Stage",
y = "Frequency (proportion)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot
ggsave("code_frequencies.png", width = 10, height = 6)
ena.accumulate.data = function (units = NULL, conversation = NULL, codes = NULL, metadata = NULL,
model = c("EndPoint", "AccumulatedTrajectory", "SeparateTrajectory"),
weight.by = "binary", window = c("MovingStanzaWindow", "Conversation"),
window.size.back = 1, window.size.forward = 0, mask = NULL,
include.meta = T, as.list = T, ...)
{
if (is.null(units) || is.null(conversation) || is.null(codes)) {
stop("Accumulation requires: units, conversation, and codes")
}
df <- cbind(units, conversation)
df <- cbind(df, codes)
metadata <- data.table::as.data.table(metadata)
if (!is.null(metadata) && nrow(metadata) == nrow(df)) {
df <- cbind(df, metadata)
}
model <- match.arg(model)
window <- match.arg(window)
units.by <- colnames(units)
conversations.by <- colnames(conversation)
if (identical(window, "Conversation")) {
conversations.by <- c(conversations.by, units.by)
window.size.back <- window
}
else if (identical(window, "MovingStanzaWindow")) {
if (grepl(pattern = "inf", x = window.size.back, ignore.case = T)) {
window.size.back <- Inf
}
if (grepl(pattern = "inf", x = window.size.forward, ignore.case = T)) {
window.size.forward <- Inf
}
}
data <- ENAdata$new(file = df, units = units, units.by = units.by,
conversations.by = conversations.by, codes = codes, window.size.back = window.size.back,
window.size.forward = window.size.forward, weight.by = weight.by,
model = model, mask = mask, include.meta = include.meta,
...)
data$process()
data$function.call <- sys.call()
if (as.list) {
data <- ena.set(data)
}
else {
warning(paste0("Usage of R6 data objects is deprecated and may be removed ",
"entirely in a future version. Consider upgrading to the new data ",
"object."))
}
data
}
# MAIN ENA ANALYSIS
# 1. Create ENA model with Region and Stage as units
# Set up the ENA accumulation
accum <- ena.accumulate.data(
units = ena_data[, c("Region", "stage")],  # Units (Region and stage)
conversation = ena_data[, "stanzaid"],     # Conversation (stanzas)
codes = ena_data[, codes],                 # Codes (what to connect)
window.size.back = 1                       # Use a moving window of 1 line
)
View(rENA:ena.accumulate.data)
View(rENA::ena.accumulate.data)
edit(rENA::ena.accumulate.data)
# Advanced Epistemic Network Analysis using rENA package
# This script provides comprehensive ENA analysis with detailed visualizations and statistical tests
# Install and load required packages
if (!require("rENA")) {
install.packages("rENA")
}
if (!require("tidyverse")) {
install.packages("tidyverse")
}
if (!require("ggplot2")) {
install.packages("ggplot2")
}
if (!require("gridExtra")) {
install.packages("gridExtra")
}
library(rENA)
library(tidyverse)
library(ggplot2)
library(gridExtra)
# Set seed for reproducibility
set.seed(42)
# Load the data
ena_data <- read.csv("ena_dataset.csv", stringsAsFactors = FALSE)
# Define codes (binary variables representing the presence/absence of codes)
codes <- c("ZA", "HJ", "ZC", "GM", "HX", "LX", "JN", "XS", "ZZ")
# Print basic information about the dataset
cat("Dataset dimensions:", dim(ena_data), "\n")
cat("Number of unique regions:", length(unique(ena_data$Region)), "\n")
cat("Number of unique documents:", length(unique(ena_data$documentid)), "\n")
cat("Number of unique stages:", length(unique(ena_data$stage)), "\n")
cat("Number of stanzas:", length(unique(ena_data$stanzaid)), "\n")
# Explore code frequencies
code_frequencies <- colMeans(ena_data[, codes])
cat("\nCode frequencies:\n")
print(round(code_frequencies * 100, 2))
# Visualize code frequencies by region and stage
code_summary <- ena_data %>%
group_by(Region, stage) %>%
summarize(across(all_of(codes), mean)) %>%
ungroup()
# Reshape for plotting
code_summary_long <- code_summary %>%
pivot_longer(cols = all_of(codes),
names_to = "Code",
values_to = "Frequency")
# Plot code frequencies
ggplot(code_summary_long, aes(x = Code, y = Frequency, fill = Region)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~stage) +
labs(title = "Code Frequencies by Region and Stage",
y = "Frequency (proportion)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot
ggsave("code_frequencies.png", width = 10, height = 6)
# MAIN ENA ANALYSIS
# 1. Create ENA model with Region and Stage as units
# Set up the ENA accumulation
accum <- ena.accumulate.data(
units = ena_data[, c("Region", "stage")],  # Units (Region and stage)
conversation = ena_data[, "stanzaid"],     # Conversation (stanzas)
codes = ena_data[, codes],                 # Codes (what to connect)
window.size.back = 1                       # Use a moving window of 1 line
)
edit(rENA::ena.accumulate.data)
